// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2eproto;
class Payload;
struct PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Payload* Arena::CreateMaybeMessage<::Payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Payload_PayloadFlag : int {
  Payload_PayloadFlag_general_chat = 0,
  Payload_PayloadFlag_private_chat = 1,
  Payload_PayloadFlag_update_status = 2,
  Payload_PayloadFlag_user_info = 3,
  Payload_PayloadFlag_user_list = 4,
  Payload_PayloadFlag_register_ = 5
};
bool Payload_PayloadFlag_IsValid(int value);
constexpr Payload_PayloadFlag Payload_PayloadFlag_PayloadFlag_MIN = Payload_PayloadFlag_general_chat;
constexpr Payload_PayloadFlag Payload_PayloadFlag_PayloadFlag_MAX = Payload_PayloadFlag_register_;
constexpr int Payload_PayloadFlag_PayloadFlag_ARRAYSIZE = Payload_PayloadFlag_PayloadFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Payload_PayloadFlag_descriptor();
template<typename T>
inline const std::string& Payload_PayloadFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Payload_PayloadFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Payload_PayloadFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Payload_PayloadFlag_descriptor(), enum_t_value);
}
inline bool Payload_PayloadFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Payload_PayloadFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Payload_PayloadFlag>(
    Payload_PayloadFlag_descriptor(), name, value);
}
// ===================================================================

class Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {}
  ~Payload() override;
  explicit constexpr Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload* New() const final {
    return new Payload();
  }

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Payload_PayloadFlag PayloadFlag;
  static constexpr PayloadFlag general_chat =
    Payload_PayloadFlag_general_chat;
  static constexpr PayloadFlag private_chat =
    Payload_PayloadFlag_private_chat;
  static constexpr PayloadFlag update_status =
    Payload_PayloadFlag_update_status;
  static constexpr PayloadFlag user_info =
    Payload_PayloadFlag_user_info;
  static constexpr PayloadFlag user_list =
    Payload_PayloadFlag_user_list;
  static constexpr PayloadFlag register_ =
    Payload_PayloadFlag_register_;
  static inline bool PayloadFlag_IsValid(int value) {
    return Payload_PayloadFlag_IsValid(value);
  }
  static constexpr PayloadFlag PayloadFlag_MIN =
    Payload_PayloadFlag_PayloadFlag_MIN;
  static constexpr PayloadFlag PayloadFlag_MAX =
    Payload_PayloadFlag_PayloadFlag_MAX;
  static constexpr int PayloadFlag_ARRAYSIZE =
    Payload_PayloadFlag_PayloadFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PayloadFlag_descriptor() {
    return Payload_PayloadFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& PayloadFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PayloadFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PayloadFlag_Name.");
    return Payload_PayloadFlag_Name(enum_t_value);
  }
  static inline bool PayloadFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PayloadFlag* value) {
    return Payload_PayloadFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kIpFieldNumber = 2,
    kMessageFieldNumber = 3,
    kExtraFieldNumber = 5,
    kFlagFieldNumber = 4,
    kCodeFieldNumber = 6,
  };
  // optional string sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string extra = 5;
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // optional .Payload.PayloadFlag flag = 4;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::Payload_PayloadFlag flag() const;
  void set_flag(::Payload_PayloadFlag value);
  private:
  ::Payload_PayloadFlag _internal_flag() const;
  void _internal_set_flag(::Payload_PayloadFlag value);
  public:

  // optional int32 code = 6;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  int flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  friend struct ::TableStruct_payload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Payload

// optional string sender = 1;
inline bool Payload::_internal_has_sender() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Payload::has_sender() const {
  return _internal_has_sender();
}
inline void Payload::clear_sender() {
  sender_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Payload::sender() const {
  // @@protoc_insertion_point(field_get:Payload.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_sender(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Payload.sender)
}
inline std::string* Payload::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:Payload.sender)
  return _internal_mutable_sender();
}
inline const std::string& Payload::_internal_sender() const {
  return sender_.Get();
}
inline void Payload::_internal_set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_sender() {
  // @@protoc_insertion_point(field_release:Payload.sender)
  if (!_internal_has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Payload.sender)
}

// optional string ip = 2;
inline bool Payload::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Payload::has_ip() const {
  return _internal_has_ip();
}
inline void Payload::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Payload::ip() const {
  // @@protoc_insertion_point(field_get:Payload.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Payload.ip)
}
inline std::string* Payload::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Payload.ip)
  return _internal_mutable_ip();
}
inline const std::string& Payload::_internal_ip() const {
  return ip_.Get();
}
inline void Payload::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_ip() {
  // @@protoc_insertion_point(field_release:Payload.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Payload.ip)
}

// optional string message = 3;
inline bool Payload::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Payload::has_message() const {
  return _internal_has_message();
}
inline void Payload::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Payload::message() const {
  // @@protoc_insertion_point(field_get:Payload.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Payload.message)
}
inline std::string* Payload::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Payload.message)
  return _internal_mutable_message();
}
inline const std::string& Payload::_internal_message() const {
  return message_.Get();
}
inline void Payload::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_message() {
  // @@protoc_insertion_point(field_release:Payload.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Payload.message)
}

// optional .Payload.PayloadFlag flag = 4;
inline bool Payload::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Payload::has_flag() const {
  return _internal_has_flag();
}
inline void Payload::clear_flag() {
  flag_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Payload_PayloadFlag Payload::_internal_flag() const {
  return static_cast< ::Payload_PayloadFlag >(flag_);
}
inline ::Payload_PayloadFlag Payload::flag() const {
  // @@protoc_insertion_point(field_get:Payload.flag)
  return _internal_flag();
}
inline void Payload::_internal_set_flag(::Payload_PayloadFlag value) {
  assert(::Payload_PayloadFlag_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  flag_ = value;
}
inline void Payload::set_flag(::Payload_PayloadFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:Payload.flag)
}

// optional string extra = 5;
inline bool Payload::_internal_has_extra() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Payload::has_extra() const {
  return _internal_has_extra();
}
inline void Payload::clear_extra() {
  extra_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Payload::extra() const {
  // @@protoc_insertion_point(field_get:Payload.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payload::set_extra(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Payload.extra)
}
inline std::string* Payload::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:Payload.extra)
  return _internal_mutable_extra();
}
inline const std::string& Payload::_internal_extra() const {
  return extra_.Get();
}
inline void Payload::_internal_set_extra(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  extra_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payload::_internal_mutable_extra() {
  _has_bits_[0] |= 0x00000008u;
  return extra_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payload::release_extra() {
  // @@protoc_insertion_point(field_release:Payload.extra)
  if (!_internal_has_extra()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return extra_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payload::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  extra_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Payload.extra)
}

// optional int32 code = 6;
inline bool Payload::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Payload::has_code() const {
  return _internal_has_code();
}
inline void Payload::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payload::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payload::code() const {
  // @@protoc_insertion_point(field_get:Payload.code)
  return _internal_code();
}
inline void Payload::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  code_ = value;
}
inline void Payload::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Payload.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Payload_PayloadFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Payload_PayloadFlag>() {
  return ::Payload_PayloadFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
